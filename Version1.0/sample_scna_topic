import rclpy
from rclpy.node import Node
from sensor_msgs.msg import LaserScan
import socket
import pickle

class LaserScanServer(Node):
    """
    A ROS node that acts as a server to send serialized laser scan data to a connected client over TCP.
    """
    def __init__(self):
        """
        Initialize the laser scan server node, set up TCP server and subscribe to laser scan messages.
        """
        super().__init__('laser_scan_server')
        # Subscribe to the '/scan' topic to receive laser scan messages.
        self.subscription = self.create_subscription(
            LaserScan,
            '/scan',
            self.scan_callback,
            10)
        # Create a TCP/IP socket.
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        # Bind the socket to the server address and listen for incoming connections.
        self.sock.bind(('localhost', 50000))
        self.sock.listen(1)
        # Accept a connection.
        self.conn, self.addr = self.sock.accept()
        self.get_logger().info("Laser Scan Server is running and connected to a client.")

    def scan_callback(self, msg):
        """
        Callback function that processes laser scan messages and sends the data to a client.
        """
        # Extract range data from the laser scan message.
        scan_ranges = msg.ranges
        # Package the scan data into a simpler format if necessary or send it directly.
        scan_data = {'ranges': scan_ranges}
        # Send the structured scan data to the client.
        self.send_scan_data(scan_data)

    def send_scan_data(self, scan_data):
        """
        Serialize and send the laser scan data to the connected client.
        """
        try:
            # Serialize the dictionary using pickle.
            serialized_data = pickle.dumps(scan_data)
            # Send the serialized data through the socket.
            self.conn.sendall(serialized_data)
            self.get_logger().info("Sent laser scan data.")
        except Exception as e:
            # Log and handle exceptions.
            self.get_logger().error(f"Failed to send data: {e}")
            # Close the current connection and accept a new one in case of failure.
            self.conn.close()
            self.conn, self.addr = self.sock.accept()
            self.get_logger().info("Reconnected to the client.")

    def destroy_node(self):
        """
        Clean up the node resources by closing the socket connections before shutting down.
        """
        super().destroy_node()
        self.conn.close()
        self.sock.close()

def main(args=None):
    """
    Entry point for the ROS node.
    """
    rclpy.init(args=args)
    node = LaserScanServer()
    try:
        rclpy.spin(node)
    finally:
        # Ensure proper resource cleanup.
        node.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()
